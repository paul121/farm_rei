<?php

/**
 * @file
 * Farm REI module.
 */

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 */
function farm_rei_log_presave($entity) {

  // If the log is not an input log, bail.
  if ($entity->type != 'farm_input') {
    return;
  }

  // Get an entity metadata wrapper for the log.
  $log_wrapper = entity_metadata_wrapper('log', $entity);

  // If an REI is already set don't change it.
  $rei = $log_wrapper->field_farm_rei->value();
  // Check the field value using isset() so that a value of 0 can override
  // a materials REI value on the input log.
  if (isset($rei)) {
    return;
  }

  // If there is no farm material reference with the log, bail.
  if (empty($log_wrapper->field_farm_material->value())) {
    return;
  }

  // Save the longest REI defined by materials the log references.
  $max_rei = 0;
  foreach ($log_wrapper->field_farm_material as $material) {

    // If the material doesn't have an REI defined, skip it.
    if (!$material->field_farm_rei->value()) {
      continue;
    }

    // Save the longest material REI.
    $rei_value = $material->field_farm_rei->value();
    if ($rei_value > $max_rei) {
      $max_rei = $rei_value;
    }
  }

  // Update the log's REI to the largest REI provided by materials.
  if (!empty($max_rei)) {
    $log_wrapper->field_farm_rei->set($max_rei);
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function farm_rei_entity_view_alter(&$build, $type) {

  // Start a list of logs to check.
  $logs = array();

  // Start a list of area IDs to check.
  $area_tids = array();

  // If the type is a log, display a message if it references areas that have
  // an active REI. If the log itself defines an REI, display another message.
  if ($type == 'log' && !empty($build['#entity'])) {

    // Alias the log entity.
    $log = $build['#entity'];

    // Get an entity metadata wrapper for the log.
    $log_wrapper = entity_metadata_wrapper('log', $log);

    // Save all areas the log references.
    foreach ($log_wrapper->field_farm_area as $area) {
      $area_tids[] = $area->tid->value();
    }

    // Check if it is an input log.
    if ($log->type == 'farm_input') {

      // Check if the log sets an REI.
      $rei_expiration = farm_rei_log_rei_expiration($log, FALSE);
      if (!empty($rei_expiration)) {

        // Format timestamps.
        $rei_start_string = strftime('%b %d, %Y at %r', $log->timestamp);
        $rei_expiration_string = strftime('%b %d, %Y at %r', $rei_expiration);

        // Add expiration to message.
        $args = array(
          '@rei_start' => $rei_start_string,
          '@rei_expiration' => $rei_expiration_string,
        );
        $message = t('This log defines a restricted entry interval from @rei_start until @rei_expiration', $args);
        drupal_set_message($message, 'warning');
      }
    }
  }

  // If viewing an asset, display a message if its current location has
  // an active REI.
  if ($type == 'farm_asset' && !empty($build['#entity'])) {

    // Alias the asset.
    $asset = $build['#entity'];

    // Save the assets current location.
    $areas = farm_movement_asset_location($asset);

    // Save the area tids to check later.
    foreach ($areas as $area) {
      $area_tids[] = $area->tid;
    }
  }

  // If viewing a taxonomy term that is an area, display a warning message if
  // an input log defines an active REI.
  if ($type == 'taxonomy_term' && !empty($build['#term'])) {

    // Alias the term and tid.
    $term = $build['#term'];

    // If the term is not in the farm_areas vocabulary, bail.
    if ($term->vocabulary_machine_name != 'farm_areas') {
      return;
    }

    // Save the area tid to check later.
    $area_tids = array($term->tid);
  }

  // Get all input logs that reference saved areas.
  if (!empty($area_tids)) {

    // Load the farm_areas vocabulary.
    $area_vocab = taxonomy_vocabulary_machine_name_load('farm_areas');

    // Include child & parent areas.
    foreach ($area_tids as $tid) {

      // Load child areas.
      // Note: Use taxonomy_get_tree() because taxonomy_get_children()
      // only loads 1 layer deep.
      $child_areas = taxonomy_get_tree($area_vocab->vid, $tid);

      // Load parent areas.
      $parent_areas = taxonomy_get_parents_all($tid);

      // Include all child & parent area tids.
      foreach (array_merge($parent_areas, $child_areas) as $area) {
        $area_tids[] = $area->tid;
      }
    }

    // Start a query for input logs.
    $query = farm_log_query(0, TRUE, 'farm_input', FALSE);

    // Add the log ID field.
    $query->addField('ss_log', 'id');

    // Add tag to identify where this came from.
    $query->addTag('farm_rei_entity_view_alter');

    // Join in the area field. Use an inner join to exclude logs that do not
    // have an area reference.
    $query->innerJoin('field_data_field_farm_area', 'ss_fdffa', "ss_fdffa.entity_type = 'log' AND ss_fdffa.entity_id = ss_log.id AND ss_fdffa.deleted = 0");

    // Only include logs that reference the area.
    $query->where('ss_fdffa.field_farm_area_tid IN (:tids)', array(':tids' => $area_tids));

    // Execute query.
    $result = $query->execute();

    // Get log IDs.
    $log_ids = $result->fetchCol();

    // Load logs if any are found.
    if (!empty($log_ids)) {
      $logs = log_load_multiple($log_ids);
    }
  }

  // Check all logs for an active REI.
  foreach ($logs as $log) {

    // Build a message.
    $message = farm_rei_build_area_message($log, FALSE);

    // If it exists, display the message.
    if (!empty($message)) {
      drupal_set_message($message, 'warning');
    }
  }
}

/**
 * Helper function to build an REI warning message.
 *
 * @param Log $log
 *   The input log to load REI expiration from.
 * @param bool $done
 *   Only consider logs that are done. Defaults to TRUE.
 *
 * @return string
 *   The REI message.
 */
function farm_rei_build_area_message($log, $done = TRUE) {

  // Start with an empty message.
  $message = '';

  // Check if the log sets an REI.
  $rei_expiration = farm_rei_log_rei_expiration($log, $done);

  // If the log doesn't set an REI, or it has expired, bail.
  if (empty($rei_expiration) || $rei_expiration < REQUEST_TIME) {
    return $message;
  }

  // Get an entity metadata wrapper for the log.
  $log_wrapper = entity_metadata_wrapper('log', $log);

  // Check if the log references any areas.
  $count_areas = count($log_wrapper->field_farm_area);

  // If the log doesn't reference any areas, bail.
  if ($count_areas == 0) {
    return $message;
  }

  // Include first area name.
  $area_names = $log_wrapper->field_farm_area[0]->name->value();

  // Append (+ # more) if there are multiple areas.
  if ($count_areas > 1) {
    $area_names .= ' (+ ' . ($count_areas - 1) . ' ' . t('more') . ')';
  }

  // Format timestamps.
  $rei_start_string = strftime('%b %d, %Y at %r', $log->timestamp);
  $rei_expiration_string = strftime('%b %d, %Y at %r', $rei_expiration);

  // Get the log URL and name.
  $log_uri = entity_uri('log', $log);
  $log_path = $log_uri['path'];
  $log_name = entity_label('log', $log);

  // Build the message.
  $args = array(
    '@area_names' => $area_names,
    '@rei_start' => $rei_start_string,
    '@rei_expiration' => $rei_expiration_string,
    '!log_path' => url($log_path),
    '%log_name' => $log_name,
  );

  // Build message depending if is the REI is active.
  $active_rei = $log->timestamp <= REQUEST_TIME;
  if ($active_rei) {
    $message = t('There is restricted-entry in @area_names until @rei_expiration. See <a href="!log_path">%log_name</a>', $args);
  }
  else {
    $message = t('There is planned restricted-entry in @area_names from @rei_start until @rei_expiration. See <a href="!log_path">%log_name</a>', $args);
  }

  return $message;
}

/**
 * Helper function that returns an REI expiration timestamp.
 *
 * @param Log $log
 *   The input log to load REI expiration from.
 * @param bool $done
 *   Only consider logs that are done. Defaults to TRUE.
 *
 * @return int|null
 *   The REI expiration timestamp or NULL if no REI is set.
 */
function farm_rei_log_rei_expiration($log, $done = TRUE) {

  // If not an input log, bail.
  if ($log->type != 'farm_input') {
    return NULL;
  }

  // If the log is not done, bail.
  if ($done && !$log->done) {
    return NULL;
  }

  // Get an entity metadata wrapper.
  $log_wrapper = entity_metadata_wrapper('log', $log);

  // If no REI is set, bail.
  if (empty($log_wrapper->field_farm_rei)) {
    return NULL;
  }

  // Get the REI days.
  $rei_days = $log_wrapper->field_farm_rei->value();

  // Build expiration timestamp.
  $rei_expiration = strtotime('+ ' . $rei_days . ' days', $log->timestamp);

  return $rei_expiration;
}
